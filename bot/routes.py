from dotenv import load_dotenv
load_dotenv()

import logging
from aiogram import F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext

from bot.keyboards import *
from bot import dp, form_router
from bot.states import *

from db.queries import *
from db.classes import *


class ShopCallback(CallbackData, prefix="buy"):
    action: str
    index: int

@dp.message(Command("start"))
async def start_command(message: Message):
    user_id = message.from_user.id
    user_data = await get_user_data(user_id)
    if user_data is None:
        await insert_user(user_id)
        await get_random_task(user_id)

    user_data = await get_user_data(user_id)
    users = await get_all_users()
    task = await get_task_data(user_data['task_id'])
    if task == None:
        task = "–Ω–µ—Ç —Ç–µ–º—ã"
    else:
        task = task['theme']
    place = 1
    for i, user in enumerate(users):
        if user_id == user['score']:
            place = i + 1
            break
    
    await message.answer(f"<b>{user_data['prefix']}{user_data['surname']} {user_data['name']}</b>\n\n" \
                         f"üèÜ –õ–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n" \
                         f"üî∏ {place} –º–µ—Å—Ç–æ, {user_data['score']} –±–∞–ª–ª–æ–≤\n" \
                         f"üåü –î–æ—Å—Ç—É–ø–Ω–æ MInCoin's: {user_data['mincoins']}\n\n" \
                         f"üìã –¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: {task}\n\n"\
                         f"üèÖ–ü–æ–ª—É—á–µ–Ω–æ –∞—á–∏–≤–æ–∫: 0", 
                         reply_markup=main_menu_kb,
                         parse_mode='HTML')


@dp.callback_query(F.data == "main_menu")
async def main_menu(callback: CallbackQuery):
    user_data = await get_user_data(callback.from_user.id)
    users = await get_all_users()
    task = await get_task_data(user_data['task_id'])
    if task == None:
        task = "–Ω–µ—Ç —Ç–µ–º—ã"
    else:
        task = task['theme']
    place = 1
    for i, user in enumerate(users):
        if callback.from_user.id == user['score']:
            place = i + 1
            break
    await callback.message.edit_text(f"<b>{user_data['prefix']}{user_data['surname']} {user_data['name']}</b>\n\n" \
                                     f"üèÜ –õ–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n" \
                                     f"üî∏ –õ–∏—á–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {place} –º–µ—Å—Ç–æ, {user_data['score']} –±–∞–ª–ª–æ–≤\n" \
                                     f"üåü –î–æ—Å—Ç—É–ø–Ω–æ MinCoin's: {user_data['mincoins']}\n\n" \
                                     f"üìã –¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: {task}\n\n"\
                                     f"üèÖ–ü–æ–ª—É—á–µ–Ω–æ –∞—á–∏–≤–æ–∫: 0", 
                                     reply_markup=main_menu_kb,
                                     parse_mode='HTML')


@dp.callback_query(F.data == "get_task")
async def get_task_command(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_data = await get_user_data(user_id)
    if user_data['task_id'] == -1:
        await callback.message.edit_text(text=f"–°–µ–π—á–∞—Å —É —Ç–µ–±—è –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
                                         reply_markup=return_back_kb)
        return
    task_data    = await get_task_data(user_data['task_id'])
    subtask_data = await get_subtask_data(user_data['subtask_id'])
    await callback.message.edit_text(text=f"<b>–¢–µ–º–∞: {task_data['theme']}</b>\n{subtask_data['name']}: {subtask_data['description']}", 
                                     reply_markup=flag_kb, 
                                     parse_mode='html')


@dp.callback_query(F.data == "rating")
async def get_listener_command(callback: CallbackQuery):
    users = await get_all_users()
    msg = "üéñÔ∏è <b>–†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
    for i, row in enumerate(users):
        msg += f"<b>{i+1}.</b> {row['prefix']}{row['surname']} {row['name']}: {row['score']} –±–∞–ª–ª–æ–≤\n\n"
    
    await callback.message.edit_text(text=msg, 
                                     reply_markup=return_back_kb,
                                     parse_mode='HTML')


@dp.callback_query(F.data == "achievements")
async def achievements_command(callback: CallbackQuery):
    await callback.message.answer_sticker("CAACAgIAAxkBAAEavP9msvYWscIg0KAShxbTvrzwSt0tXQAC8U0AAvDbmUmtWLDWrAj3xDUE")
    await callback.message.answer(text="üë∑üèª‚Äç‚ôÇÔ∏è–ê—á–∏–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç,üë∑üèª‚Äç‚ôÇÔ∏èüë∑üèª‚Äç‚ôÇÔ∏è –≤–µ–¥—É—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µüë∑üèª‚Äç‚ôÇÔ∏è —Ä–∞–±–æ—Ç—ã...üë∑üèª‚Äç‚ôÇÔ∏èüë∑üèª‚Äç‚ôÇÔ∏èüë∑üèª‚Äç‚ôÇÔ∏è", 
                                     reply_markup=return_back_kb)


@dp.callback_query(F.data == "shop")
async def shop_command(callback: CallbackQuery):
    goods = await get_all_goods()
    inline_keyboard = []
    for good in goods:
        inline_keyboard.append([InlineKeyboardButton(text=f"{good['name']} {good['price']} MinCoin's", callback_data=ShopCallback(action='buy', index=good['id']).pack())])
    inline_keyboard.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="main_menu")])
    kb = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
    await callback.message.edit_text(text=f'üëë <b>–ú–∞–≥–∞–∑–∏–Ω –∫–∞–π—Ñ–æ–≤—ã—Ö –ø–ª—é—à–µ–∫</b> üëë\n\n'\
                                          f'–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ –¥–∞—à–±–æ—Ä–¥–µ –∏–ª–∏ —Ö–∏–Ω—Ç—ã –¥–ª—è —Ç–∞—Å–∫–æ–≤.', 
                                     reply_markup=kb,
                                     parse_mode='HTML')


@dp.callback_query(ShopCallback.filter(F.action == "buy"))
async def buy_good(callback: CallbackQuery):
    goods = await get_all_goods()
    user = await get_user_data(callback.from_user.id)
    good_idx = int(callback.data.split(':')[-1]) - 1
    if user['mincoins'] >= goods[good_idx]['price']:
        await update_user_by_id(callback.from_user.id, User.prefix, goods[good_idx]['prefix'])
        await update_user_by_id(callback.from_user.id, User.score, user['mincoins'] - goods[good_idx]['price'])
        await callback.message.edit_text(text=f"üéâ –ü–æ–¥–∑—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π {goods[good_idx]['name']}!",
                                         reply_markup=return_back_kb)
        return
    else:
        await callback.message.edit_text(text=f"üò± –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ—á–∫–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:(",
                                         reply_markup=return_back_kb)
        return


@dp.callback_query(F.data == "exchange_points")
async def exchange_command(callback: CallbackQuery, state: FSMContext):
    user_data = await get_user_data(callback.from_user.id)
    points = user_data["score"]
    mincoins = user_data["mincoins"]
    await callback.message.edit_text(text=f"üí± <b>–û–ë–ú–ï–ù–ù–ò–ö</b>\n\n"\
                                          f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ –æ–±–º–µ–Ω—è—Ç—å –≤–∞—à–∏ –±–∞–ª–ª—ã –Ω–∞ MinCoin-—ã –ø–æ –∫—É—Ä—Å—É 10:1\n\n"\
                                          f"üí≥<b>–ë–∞–ª–∞–Ω—Å:</b> "\
                                          f"{points} –±–∞–ª–ª–æ–≤\t"\
                                          f"{mincoins} MinCoin's",
                                          reply_markup=exchenge_kb)


@form_router.callback_query(F.data == "exchange")
async def get_points_value(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Form_exchange_points.exchanging)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–±–º–µ–Ω–∞:")


@form_router.message(Form_exchange_points.exchanging)
async def exchange(message: Message, state: FSMContext):
    await state.clear()
    score = message.text
    user_data = await get_user_data(message.from_user.id)
    if not score.isdigit():
        await message.answer(text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞...",
                             reply_markup=return_back_kb)
        return
    if int(score) <= 0:
        await message.answer(text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞...",
                             reply_markup=return_back_kb)
        return
    if user_data['score'] < int(score):
        await message.answer(text="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–±–º–µ–Ω–∞",
                             reply_markup=return_back_kb)
        return
    
    await update_user_by_id(message.from_user.id, User.score, user_data['score'] - int(score))
    await update_user_by_id(message.from_user.id, User.mincoins, user_data['mincoins'] + (int(score) // 10))
    await message.answer_sticker("CAACAgIAAxkBAAEavPVmsvE8gQuOJg6Da_Hm9WX3GN8k5gACNUoAAsVamUnsRKF0Tr1IxzUE")
    await message.answer(text=f"–í—ã –æ–±–º–µ–Ω—è–ª–∏ {score} –±–∞–ª–ª–æ–≤ –Ω–∞ {int(score) // 10} MinCoin's\n\n"\
                               "<b>–û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –≤–ª–æ–∂–µ–Ω–∏–µ</b>",
                               reply_markup=return_back_kb,
                               parse_mode="HTML")


@form_router.callback_query(F.data == "send_flag")
async def send_flag_command(callback: CallbackQuery, state: FSMContext):
    user_data = await get_user_data(callback.from_user.id)
    if user_data['task_id'] == -1:
        await callback.message.edit_text(text="–í—ã —É–∂–µ —Ä–µ—à–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ.", 
                                         reply_markup=return_back_kb)
        return
    await state.set_state(Form_send_flag.sending)
    await callback.message.answer(text="–í–≤–µ–¥–∏—Ç–µ —Ñ–ª–∞–≥:")


@form_router.message(Form_send_flag.sending)
async def validate_flag(message: Message, state: FSMContext):
    await state.clear()
    flag = message.text
    user_id = message.from_user.id
    user_data = await get_user_data(user_id)
    subtask_data = await get_subtask_data(user_data['subtask_id'])
    task_data = await get_task_data(user_data['task_id'])
    if user_data['task_id'] == -1:
        await message.answer(text=f"–ó–∞–¥–∞–Ω–∏–µ —É–∂–µ —Ä–µ—à–µ–Ω–æ!",
                             reply_markup=return_to_task_kb)
        return
    if flag == subtask_data['flag']:
        flag_part = await get_flag_part(user_id, task_data['flag'])
        await message.answer(text=f"ü§ô –í–µ—Ä–Ω—ã–π —Ñ–ª–∞–≥! –ß–∞—Å—Ç–∏—á–∫–∞ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ —Ñ–ª–∞–≥–∞ (–í—Ç–æ—Ä—É—é –∑–∞–±–µ—Ä—ë—à—å —É –¥—Ä—É–≥–∞):\n{flag_part[0]}. {flag_part[1]}", 
                             reply_markup=return_to_task_kb)
        return
    
    if flag == task_data['flag']:
        await update_after_validate(task_data)
        await message.answer(text=f"ü§ô –í–µ—Ä–Ω—ã–π —Ñ–ª–∞–≥! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {task_data['score']} –æ—á–∫–æ–≤.", 
                             reply_markup=return_to_task_kb)
        return
    
    await message.answer(text="‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–ª–∞–≥", 
                         reply_markup=return_to_task_kb)


async def update_after_validate(task_data: dict):
    users = await get_all_users(User.task_id, task_data['id'])
    for user in users:
        await update_user_by_id(user['id'], User.score, user['score'] + task_data['score'])
        if user['completed_tasks']:
            await update_user_by_id(user['id'], User.completed_tasks, user['completed_tasks'] + ',' + str(task_data['id']))
        else:
            await update_user_by_id(user['id'], User.completed_tasks, str(task_data['id']))
        await update_user_by_id(user['id'], User.task_id, -1)